searchState.loadedDescShard("git_sync", 0, "Manage Github repositories from the command line. You can …\nA macro to easily retry asynchronous operations with …\nHandles the result of an API call using octocrab and maps …\nHandles reducing some of the boiler plate for defining …\n<code>git_sync</code> is an application for managing multiple github …\nManage backups of repositories\nDefine all the valid commands for acting on backups\nChoose where to store backups\nBackup repositories\nManage branches\nDefine all the valid commands for acting on branches\nCheck repositories for various conditions\nCheck repositories for various conditions\nClean up old backups\nClose a PR for a repository. Currently doesn’t do …\nThe top-level command enum for the CLI\nCompare tags between repositories\nOptions for the ‘comparison’ tag command\nGenerate a default config\nCreate new backups. This operation can take a long time …\nCreate a new release\nCreate a new tag\nCreate a branch for repositories\nCreate a new branch.\nOpen a PR to merge <code>head</code> into <code>branch</code>\nCreate a release for a repository.\nOptions for the ‘create’ tag command\nDelete a tag\nDelete a branch in repositories\nDelete a branch from a repository\nDefines the arguments for the ‘delete’ tag subcommand\nGenerate shell completions or manpages.\nValid options that can be passed to <code>make_latest</code> in the …\nMerge a PR. Not used since if you already know the PR …\nCreate a new PR\nManage Pull Requests\nDefine all the valid commands for acting on pull requests\nManage releases\nDefine all the valid commands for actiong on releases\nManage repositories\nDefine all the valid commands for acting on repositories\nValid options for <code>repository_type</code> for cli arguments\nSync tags\nSync repositories\nSync a repository. If the repository is already up to …\nSync tags for a forked repository with its parent\nManage tags\nDefine all the valid commands for acting on Tags\nCreate this tag for all configured repositories, all using …\nApply to all configured repositories\nApply to all configured repositories. Not a valid if ‘…\nSync tags for all configured repositories. Not valid if ‘…\nSync all configured repositories\nCheck all repositories\nCreate a PR for all configured repositories\nClose a PR for all configured repositories\nDelete the specified branch for all configured repositories\nCreate the branch for all configured repositories\nCreate this release for all configured repositories\nBackup all configured repositories\nThe name of the branch you want the changes pulled into\nThe base branch of the PR to close\nThe base branch of the PR to close\nThe base branch for the new branch\nThe body for the PR\nThe target branch\nSync a specific branch. Not a valid option when using –…\nSpecify the branch to check. Required when ‘–protected…\nBranch to delete\nRegex that can be used to filter branches\nBucket name for where you want to store your backup if …\nThe command that will get run\nExtra detail to append to the automatic commit message\nTitle for the automatic commit message\nThe tag or branch to base the release off of\nNumber of days of inactivity after which a branch is …\nThe destination for the backup\nCheck that the directory passed is a valid and existing …\nPath to the backup directory. This is only implemented for …\nPath to config file\nForce the sync. This is required when using –all and –…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe name of the branch where your changes are implemented\nThe PR number\nThe PR number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of parallel tasks to run\nSet this release to the latest.\nEnable checking the license of target repositories\nAttempt to merge the PR after creating it.\nExtra detail to append to automatic commit message\nThe method to use when merging the PR\nThe method to use when merging the PR\nTitle for the automatic commit message\nNew branch to create\nEnable checking for old branches in target repository\nParse the command line arguments and validate them.\nThe directory to store the backups in. If not specified, …\nThe previous release tag or branch. This is used to …\nEnable checking the protected status of the main branch …\nMake output quiet. This is useful when not running in …\nSync all common branches between the fork and its parent\nThe name of the release. If not specified, the tag name …\nThe url of the repository to create the tag in. If –all …\nThe base repository to compare against\nThe target repository. Not a valid option if ‘all’ is …\nThe Repository to sync tags for. Not valid if ‘–all’ …\nThe repository to sync\nThe repository to check\nRepository for which you are creating a PR\nRepository for which you are closing a PR\nRepository for which you are merging a PR\nDelete a branch from a repository\nCreate a branch in this repository\nThe repository for which to create the release\nThe repository to backup\nThe types of repositories to use for any command that …\nA list of reviewers to request a review from\nSHA that the pull request head must match to permit merging\nSHA that the pull request head must match to permit merging\nEnable sending the results of the operation to a slack …\nThe new tag’s name\nThe tag to delete\nThe title for the PR\nGithub Personal Access Token\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate an existing backup instead of making a new mirror …\nValidate that the maximum number of paralllel jobs is …\nVerbose output\nSync annotated tags. Enabling this requires that git is …\nPath to save the config file. If not specified, it will …\nOverwrite existing config file if it exists\nWhat to generate. Can be shell completion for bash, zsh, …\nAn optional output path. If not specified, the current …\nThe currently defined name of the config file. This may …\nThis is the root level of the configuration file. These …\nOptions for git. This may be removed\nGithub configuration struct\nThis should probably be moved to git config\nThe configuration for the different types of repositories\nA blacklist for branches when searching for stale ones. …\nA list of forked repositories\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad config from an existing toml file.\nGet all repositories defined in the config file\nGet a vector of repositories defined in the config file …\nGet a github api token\nGet the repo owner\nGet a vector of private repositories defined in the config …\nGet a vector of public repositories defined in the config …\nGet git information about the current user, first from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to load the config from expected locations. Checks in …\nCreate a new config from an optional path. If None, then …\nA list of private repositories\nA list of public repositories\nYour github API token\nThe webhook url for slack integration. If this is not …\nDifferent categories of errors for user-friendly messages\nError type to make it easier to handle returning from …\nThis error is too big, so we wrap it in a Box, then …\nHolds information about an error to present to the user\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWalk through the error chain to find out if it’s a …\nCheck if whatever error is passed is reasonably retryable. …\nHelper function to extract errors from an <code>octocrab::Error</code>\nConvert this error into a user-friendly version\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nBackup repositories. Contains the Github Client …\nManage branches for repositories. Contains the Github …\nRun various checks and sanity checks for a repository. …\nThe top level definition for the Github client\nManages forked repositories, particularly updating the …\nHandle passed arguments\nUsed to manage pull requests for libraries. Contains the …\nManage releases. Contains the Github Client implementation …\nManage tags. Contains the Github Client implementation for …\nThe size of each part of a multipart file upload to s3.\nContains information about tags that are missing for a …\nGithub api entry point\nNo output\nPrint output to stdout. This is useful for when we do want …\nThis is to display a progress bar. Some actions take a …\nAppend an error message to be sent to slack at the end. …\nAppends success messages to be sent to slack at the end. …\nBackup all configured repositories into the specified …\nBackuup all repositories to S3\nBackup a single repository into the specified folder\nUpload a backup to s3. This requires your aws credentials …\nRun the selected checks against all configured repositories\nGet branches that are older than a certain number of days …\nCreate the passed branch for each repository provided\nCreate a pull request for all configured repositories, and …\nCreate a new release for each of the specified …\nCreate the tag for all configured repositories\nCreate a branch from some base branch in a repository\nCreate a pull request for a specific repository\nCreate a new release for a specific repository. Release …\nCreate a tag for a specific repository\nDelete the specified branch for each configured repository\nDelete the specified tag for all configured repositories\nDelete a branch from a repository\nDelete the specified tag for a repository. Deleting a tag …\nGet a diff of all configured repositories tags, compared …\nGet a diff of tags between a single forked repository and …\nTODO: This function is currently not used, but could be …\nDisplay the results of the various checks into a nice table\nFetch all branches for a single repository\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate release notes for a particular releaese. It grabs …\nGet the most recent commit of a branch, so we can use that …\nGet the number of graphql api calls left at the moment. …\nGet the parent repository of a github repository.\nGet the number of api calls left at the moment. Generally, …\nThis can be used to fetch tags in a more api-call …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines whether or not we’re running in interactive mode\nMerge a pull request. This will only work if there are no …\nAn ordered set of tags that are missing in the fork …\nInitialize a new Github client\nOctocrab client. This can be trivially cloned\nWhere output should go. This can only be written to Once\nA hashset of the parent repositories. If you have a fork …\nThis is a way to clean up stale references in a configured …\nA semaphore to control the maximum number of jobs that can …\nAn error message that will get sent to slack at the end of …\nThis can be used to send the contents of <code>slack_messages</code> …\nA message that gets sent to slack at the end of all …\nSync all configured repositories. Only repositories that …\nSync tags for all configured repositories\nSync all new annotated tags from a forked repo with its …\nSync a single repository with its parent repository. …\nGo through and try to sync every branch that’s common …\nSync lightweight tags from the parent repo to the forked …\nSync many tags asynchronously. We can use the github api …\nAn optional webook for posting to slack, if that feature …\nGraphql query to fetch branches and their commit dates\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate manpages for all subcommands. Otherwise we only …\nParse the argument that gets passed, and run their …\nProcess all Branch commands\nProcess all PR commands\nProcess all Repo commands\nProcess all Tag commands\nHelper to write manpages\nInformation about pagination needed for queries\nA parent repository\nThe refs in a repository\nStruct to deserialize the repository data into\nThe root level response from github\nAn actual repository containing its parent if it has one\nThe actual tag node\nInformation about the tag, particularly it’s type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA basic sample configuration that can be initialized by …\nCreate a sample config file\nPost data to a Slack channel using the provided webhook …\nCompress a directory\nExtract a tar.gz. This is only needed to test that the …\nOptions for PR creation.\nOptions for merging a PR.\nThe branch where changes should be merged into.\nBody of the PR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe branch where changes are implemented.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtra detail to append to automatic commit message.\nThe method to use for merging the PR. Defaults to ‘merge…\nPR number to merge.\nA list of reviewers to request a review from.\nSHA that pull request head must match to allow merge.\nTitle of the PR.\nTitle for the automatic commit message.\nUrl of the repository where the PR should be created.\nUrl of the repository where the PR exists.\nStruct to hold branch protection rule information. Exists …\nA holder for the results of various checks on a repository\nA holder for things that can be checked for a repository\nHold basic information about a github url\nStruct for holding tag information. This is for both …\nThe different types of tags\nA regex filter for the branches\nSHA of annotated tag commit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert github http status errors to a usable string …\nParse the owner and repository name from a github …\nConvert an https github url to a clonable SSH URL, needed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe license of the repository, if known\nCheck the license of the repository\nThe main branch of the repository, if known\nName of the tag\nCheck for old branches. The tuple is whether to enable it, …\nThe owner of this repository\nGit URL of the parent repository\nCheck if the main branch is protected\nThen name of the repository we’re checking\nName of the repository\nCertain types of branch protection rules can be queried. …\nSHA of the tag\nThe type of tag (Annotated or lightweight)\n<code>ToString::to_string</code>, but without panic on OOM.\nThe full URL of the repository\nGit URL from where the tag was fetched\nA struct wrapping around tabled’s tables so that we can …\nSet the alignment of the row/column\nBuild the table\nDefine if the table should be centred in the terminal\nReturns the argument unchanged.\nAdd a header to the table\nCalls <code>U::from(self)</code>.\nSet the rows for the table\nAdd a title to your table\n<code>ToString::to_string</code>, but without panic on OOM.\nHold information about the git user\nEmail of the user\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nName of the user\nCreate a new <code>UserDetails</code> instance\nTry to load user information from the environment through …")